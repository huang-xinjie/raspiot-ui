{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "sitemap"
  },
  "name" : "raspiot-ui",
  "script" : "raspiot_endpoint = \"\"\nroom_in_process = false\nmain()\n\nfunction main() {\n    var args_para = args.queryParameters\n    log(\"args: \" + JSON.stringify(args_para))\n    raspiot_ip = args_para.ip || \"\"    \/\/ replace with your raspiot-server's LAN IP\n    if (raspiot_ip) {\n        raspiot_endpoint = \"http:\/\/\" + raspiot_ip\n        raspiot()\n    } else {\n        let input =  new Alert()\n        input.title = \"Input raspiot-server's IP\"\n        input.addTextField(\"raspiot-server's LAN IP\")\n        input.addAction(\"OK\")\n        input.addCancelAction(\"Cancel\")\n        input.presentAlert().then(idx => {\n            if(idx == 0) {\n                raspiot_endpoint = \"http:\/\/\" + input.textFieldValue(0)\n                raspiot()\n            }\n        })\n    }\n}\n\nasync function raspiot() {\n    house = \"raspiot home\"\n    house_table = new UITable()\n    title = new UITableRow()\n    title.isHeader = true\n    title.backgroundColor = title_color()\n    back = title.addButton(\"🔚\")\n    back.leftAligned()\n    back.widthWeight =10\n    back.dismissOnTap = true\n\n    room_name = title.addText(house)\n    room_name.centerAligned()\n    room_name.widthWeight = 80\n    menu = title.addButton(\"•••\")\n    menu.widthWeight = 10\n    menu.rightAligned()\n    menu.onTap = () => {\n        handle_room(house)\n    }\n    house_table.addRow(title)\n\n    loading = new UITableRow()\n    loading.addImageAtURL(icon_uri(\"loading\")).centerAligned()\n    loading.height = 30\n    house_table.addRow(loading)\n    house_table.present(fullscreen=true)\n\n    rooms = await get_room_list(house)\n    house_table.showSeparators = true\n    house_table.removeRow(loading)\n    for (r in rooms) {\n        let room = rooms[r]\n        room_row = new UITableRow()\n        room_row.dismissOnSelect = false\n        room_row.onSelect = () => {\n            room_table = new UITable()\n            room_table.showSeparators = true\n            in_room(room_table, room.name)\n            room_table.present(fullscreen=false)\n        }\n        room_ui = room_row.addText(room.name)\n        room_ui.centerAligned()\n        house_table.addRow(room_row)\n    }\n    house_table.reload()\n}\n\nasync function get_room_list(house) {\n    url = raspiot_endpoint + \"\/rooms\"\n    req = new Request(url)\n    req.timeoutInterval = 2\n    try {\n        return await req.loadJSON()\n    } catch (error) {\n        notification(\"Get room list failed\", \"pls check network and raspiot-server.\")\n        return []\n    }\n}\n\nasync function in_room(table, room, select, on_show, realtime) {\n    if (room_in_process) {\n        log(\"room in process, skip.\")\n        return\n    }\n\n    select = select || \"\"\n    on_show = on_show || \"\"\n    realtime = realtime || false\n    room_in_process = true\n    table.removeAllRows()\n    title = new UITableRow()\n    title.isHeader = true\n    title.backgroundColor = title_color()\n    live = title.addButton(\"live\")\n    live.leftAligned()\n    live.widthWeight =10\n    live.onTap = () => {\n        in_room(table, room, select, on_show, true)\n    }\n    room_name = title.addText(room)\n    room_name.centerAligned()\n    room_name.widthWeight = 80\n    menu = title.addButton(\"•••\")\n    menu.rightAligned()\n    menu.widthWeight = 10\n    menu.onTap = () => {\n        handle_device(table, room)\n    }\n    table.addRow(title)\n\n    devices = await get_device_list(room)\n    for (d in devices) {\n        let device = devices[d]\n        device_row = new UITableRow()\n        device_row.dismissOnSelect = false\n        device_row.onSelect = () => {\n            log(\"select \" + device.name)\n            on_select = select == on_show ? \"\" : select\n            in_room(table, room, device.name, on_select)\n        }\n        device_row.addText(\"\").widthWeight = 15\n        device_ui = device_row.addText(device.name)\n        device_ui.centerAligned()\n        device_ui.widthWeight = 70\n        icon = device.status == \"online\" ? \"🟢\" : \"🟠\"\n        status = device_row.addText(icon)\n        status.rightAligned()\n        status.widthWeight = 15\n        table.addRow(device_row)\n        if (device.name == select && select != on_show) {\n            await show_device(table, room, device, realtime)\n        }\n    }\n    table.reload()\n    room_in_process = false\n}\n\nfunction handle_room(house) {\n    let alert = new Alert()\n    alert.title = \"Handle room\"\n    alert.addAction(\"Add room\")\n    alert.addAction(\"Rename room\")\n    alert.addDestructiveAction(\"Remove room\")\n    alert.addCancelAction(\"Cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx == 0)\n            add_room(house)\n        else if(idx == 1)\n            rename_room(house)\n        else if(idx == 2)\n            delroom(house)\n    })\n}\n\nfunction add_room(house) {\n    let alert = new Alert()\n    alert.title = \"Add room\"\n    alert.addTextField(\"room name\")\n    alert.addAction(\"Add\")\n    alert.addCancelAction(\"Cancel\")\n    alert.present().then(idx => {\n        let room = alert.textFieldValue(0)\n        if(room.length > 0) {\n            let rooms = get_room_list(house)\n            if(rooms.indexOf(room) == -1)\n                log(\"new room\")\n            else\n                log(room + \" is exists.\")\n            \/\/ send request to raspiot-server\n        }\n        raspiot()\n    })\n}\n\nfunction rename_room(house) {\n    let rooms = get_room_list(house)\n    let alert = new Alert()\n    alert.title = \"Rename room\"\n    for (r in rooms) {\n        alert.addAction(rooms[r])\n    }\n    alert.addCancelAction(\"Cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx == -1)\n            raspiot()\n        else if(idx < rooms.length) {\n            let oldroom = rooms[idx]\n            let checkbox =  new Alert()\n            checkbox.title = \"Rename \" + oldroom + \" to\"\n            checkbox.addTextField(\"Input the room name\")\n            checkbox.addDestructiveAction(\"Rename\")\n            checkbox.addCancelAction(\"Cancel\")\n            checkbox.presentAlert().then(idx => {\n                let newroom = checkbox.textFieldValue(0)\n                if(idx == 0) {\n                    if(rooms.indexOf(newroom) == -1) {\n                        console.log(oldroom + \" is renamed to \"+ newroom)\n                    } else {\n                        console.log(oldroom + \" is exists\")\n                    }\n                }\n                raspiot()\n            })\n        }\n    })\n}\n\nfunction delroom(house) {\n    let alert = new Alert()\n    alert.title = \"Remove room\"\n    let rooms = get_room_list(house)\n    for (r in rooms) {\n        alert.addAction(rooms[r])\n    }\n    alert.addCancelAction(\"Cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx == -1)\n            raspiot()\n        else if(idx < rooms.length) {\n            let room = rooms[idx]\n            let checkbox =  new Alert()\n            checkbox.title = \"Remove room\"\n            checkbox.message = \"Sure to remove the \" + room + \"?\"\n            checkbox.addDestructiveAction(\"Remove\")\n            checkbox.addCancelAction(\"Cancel\")\n            checkbox.presentAlert().then(idx => {\n                if(idx == 0) {\n                    console.log(room + \" is removed.\")\n                }\n            })\n        }\n    })\n}\n\nasync function get_device_list(room) {\n    url = raspiot_endpoint + \"\/devices?room=\" + room\n    let req = new Request(url)\n    req.timeoutInterval = 5\n    let devices = await req.loadJSON()\n    log(devices)\n    return devices\n}\n\nasync function get_device_attrs(device_uuid, realtime) {\n    url = raspiot_endpoint + \"\/device\/\" + device_uuid + \"?realtime=\" + realtime\n    let req = new Request(url)\n    req.timeoutInterval = 5\n    try {\n        return await req.loadJSON()\n    } catch (error) {\n        notification(\"Get device attrs failed\", \"pls check network and raspiot-server.\")\n    }\n}\n\nasync function show_device(table, room, device, realtime) {\n    log(\"show \" + device.name)\n    device = await get_device_attrs(device.uuid, realtime)\n    for (d in device.attrs) {\n        row = new UITableRow()\n        row.dismissOnSelect = false\n        row.backgroundColor = device.status == \"online\" ? Color.green() : Color.orange()\n        let attr = device.attrs[d]\n        row.addText(attr.name).leftAligned()\n        if (attr.type == \"text\") {\n            if (attr.read_only) {\n                row.addText(attr.value).rightAligned()\n            } else {\n                text = row.addButton(attr.value)\n                text.rightAligned()\n                text.onTap = () => {\n                    deal_text(table, room, device, attr)\n                }\n            }\n        } else if (attr.type == \"select\") {\n            select = row.addButton(attr.value)\n            select.rightAligned()\n            select.onTap = () => {\n                deal_select(table, room, device, attr)\n            }\n        } else if (attr.type == \"stream\") {\n            stream = row.addButton(attr.value)\n            stream.rightAligned()\n            stream.onTap = () => {\n                deal_stream(table, room, device, attr)\n            }\n        }  else if (attr.type == \"image\") {\n            row.addImageAtURL(attr.value)\n        } else if (attr.type == \"button\") {\n            button = row.addButton(attr.name)\n            button.rightAligned()\n            button.onTap = () => {\n                set_attr(table, room, device, attr.name, attr.value)\n            }\n        } else if (attr.type == \"switch\") {\n            switch_icon = row.addImageAtURL(icon_uri(attr.value))\n            switch_icon.rightAligned()\n            \/\/ UITableCell中只有button支持触摸事件，这里用row的选择事件代替\n            row.onSelect = () => {\n                set_attr(table, room, device, attr.name, String(!attr.value))\n            }\n        } else if (attr.type == \"range\") {\n            range = row.addButton(attr.value)\n            range.rightAligned()\n            range.onTap = () => {\n                set_range(table, room, device, attr)\n          }\n        }\n        table.addRow(row)\n    }\n\n    if (!device.attrs.length) {\n        notification(\"Unable to show attrs\", \"device \" + device.name + \" never connected, unable to get device attrs. Pls check the device.\")\n    }\n}\n\nfunction deal_text(table, room, device, attr) {\n    input = new Alert()\n    input.title = \"Set \" + attr.name\n    input.addTextField(attr.value)\n    input.addDestructiveAction(\"OK\")\n    input.addCancelAction(\"Cancel\")\n    input.presentAlert().then(idx => {\n        if(idx == 0) {\n            input_value = input.textFieldValue(0)\n            log(\"deal text \" + input_value)\n            set_attr(table, room, device, attr.name, input_value)\n        }\n    })\n}\n\nfunction deal_stream(table, room, device, attr) {\n    let web_view = new WebView()\n    log(attr.value)\n    web_view.loadURL(attr.value)\n    web_view.waitForLoad()\n    web_view.present()\n}\n\nfunction deal_select(table, room, device, attr) {\n    log(\"select \" + attr.name)\n    let alert = new Alert()\n    alert.title = \"select \" + attr.name\n    options = attr.value_constraint.options\n    for (o in options) {\n        alert.addAction(options[o])\n    }\n    alert.addCancelAction(\"cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx != -1) {\n            set_attr(table, room, device, attr.name, options[idx])\n        }\n    })\n}\n\nfunction set_range(table, room, device, attr) {\n    let alert = new Alert()\n    alert.title = \"set \" + attr.name\n    min = attr.value_constraint.min\n    max = attr.value_constraint.max\n    step = attr.value_constraint.step\n    for (var i=min; i <= max; i+=step) {\n        alert.addAction(String(i))\n    }\n    alert.addCancelAction(\"cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx != -1) {\n            set_attr(table, room, device, attr.name, String(idx * step + min))\n        }\n    })\n}\n\nasync function set_attr(table, room, device, attr_name, attr_value) {\n    if (device.status == \"offline\") {\n        notification(\"Fail to handle device\",\n                             device.name + \" is offline.\")\n        return\n    }\n\n    url = raspiot_endpoint + \"\/device\/\" + device.uuid + \"\/attr\"\n    let req = new Request(url)\n    req.method=\"PUT\"\n    req.timeoutInterval = 10\n    req.headers = {\"Content-Type\": \"application\/json\"}\n    req.allowInsecureRequest = true\n    req.addParameterToMultipart(\"attr\", attr_name)\n    req.addParameterToMultipart(\"value\", attr_value)\n    await req.loadJSON()\n    log(req)\n    in_room(table, room, device.name)\n}\n\nfunction icon_uri(value) {\n    on_uri = raspiot_endpoint + \"\/statics\/switch_on.png\"\n    off_uri = raspiot_endpoint + \"\/statics\/switch_off.png\"\n    loading_uri = raspiot_endpoint + \"\/statics\/loading.png\"\n    if (value == true) {\n        return on_uri\n    } else if (value == false) {\n        return off_uri\n    } else if (value == \"loading\") {\n        return loading_uri\n    }\n}\n\nfunction handle_device(table, room) {\n    let alert = new Alert()\n    alert.title = \"Handle device\"\n    alert.addAction(\"Add device\")\n    alert.addAction(\"Rename device\")\n    alert.addDestructiveAction(\"Remove device\")\n    alert.addCancelAction(\"Cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx == 0)\n            add_device(table, room)\n        else if(idx == 1)\n            rename_device(table, room)\n        else if(idx == 2)\n            del_device(table, room)\n    })\n}\n\nasync function add_device(table, room) {\n    device = await scan_device_info()\n    let alert = new Alert()\n    alert.title = \"Add device\"\n    alert.addTextField(\"* device name\", device.name)\n    alert.addTextField(\"* mac address\", device.mac_addr)\n    alert.addTextField(\"* protocol\", device.protocol)\n    alert.addTextField(\"* port\", String(device.port))\n    alert.addTextField(\"  ipv4 address\")\n    alert.addTextField(\"  ipv6 address\")\n    alert.addTextField(\"  sync mode\", device.sync_mode)\n    alert.addTextField(\"  sync interval\", device.sync_interval)\n    alert.addAction(\"Cancel\")\n    alert.addAction(\"Add\")\n    alert.present().then(async idx => {\n        if(idx == 1) {\n            device.name = alert.textFieldValue(0)\n            device.mac_addr = alert.textFieldValue(1)\n            device.protocol = alert.textFieldValue(2)\n            device.port = alert.textFieldValue(3)\n            device.ipv4_addr = alert.textFieldValue(4)\n            device.ipv6_addr = alert.textFieldValue(5)\n            device.sync_mode = alert.textFieldValue(6)\n            device.sync_interval = alert.textFieldValue(7)\n            await add_device_req(room, device)\n            log(room + \" add device: \" + device.name)\n            in_room(table, room)\n        }\n    })\n}\n\nasync function scan_device_info() {\n    scan = new CallbackURL(\"shortcuts:\/\/x-callback-url\/run-shortcut\")\n    scan.addParameter(\"name\", \"qrcode-scan\")\n    try {\n        scan_result = await scan.open()\n        return JSON.parse(scan_result.result)\n    } catch (error) {\n        log(\"scan failed: \" + error)\n        return {}\n    }\n}\n\nasync function add_device_req(room, device) {\n    url = raspiot_endpoint + \"\/device\"\n    let req = new Request(url)\n    req.method=\"POST\"\n    req.timeoutInterval = 10\n    req.headers = {\"Content-Type\": \"application\/json\"}\n    req.allowInsecureRequest = true\n    req.addParameterToMultipart(\"name\", device.name)\n    req.addParameterToMultipart(\"mac_addr\", device.mac_addr)\n    req.addParameterToMultipart(\"protocol\", device.protocol)\n    req.addParameterToMultipart(\"port\", device.port)\n    req.addParameterToMultipart(\"ipv4_addr\", device.ipv4_addr || \"\")\n    req.addParameterToMultipart(\"ipv6_addr\", device.ipv6_addr || \"\")\n    req.addParameterToMultipart(\"sync_mode\", device.sync_mode || \"\")\n    req.addParameterToMultipart(\"sync_interval\", device.sync_interval || \"\")\n    req.addParameterToMultipart(\"room\", room)\n    log(req)\n    response = await req.loadJSON()\n    if ((response.code || 200) != 200) {\n        notification(\"Add device \" + device.name + \" failed\", response.message)\n    }\n}\n\nasync function del_device(room_table, room) {\n    let alert = new Alert()\n    alert.title = \"Remove device\"\n    alert.message = \"Tap the device and it will be remove.\"\n    \n    devices = await get_device_list(room)\n    for (d in devices) {\n        alert.addDestructiveAction(devices[d].name)\n    }\n    alert.addCancelAction(\"Cancel\")\n    alert.present().then(idx => {\n        if(idx >= 0 && idx < devices.length) {\n            del_device_confirm(room_table, room, devices[idx])\n        }\n    })\n}\n\nasync function del_device_confirm(room_table, room, device) {\n    let checkbox =  new Alert()\n    checkbox.title = \"Remove device\"\n    checkbox.message = \"Confirm to remove the \" + device.name + \"?\"\n\/\/     checkbox.addTextField(\"Input the device name for confirm.\")\n    checkbox.addDestructiveAction(\"Remove\")\n    checkbox.addCancelAction(\"Cancel\")\n    checkbox.presentAlert().then(async idx => {\n        if(idx == 0) {\n\/\/             if(checkbox.textFieldValue(0) == device.name) {\n                await del_device_req(device)\n                console.log(device.name + \" is removed.\")\n                in_room(room_table, room)\n\/*            } else { \n                console.log(\"Input no match, remove cancel.\")\n            }*\/\n        }\n    })\n}\n\nasync function del_device_req(device) {\n    url = raspiot_endpoint + \"\/device\/\" + device.uuid\n    let req = new Request(url)\n    req.method=\"DELETE\"\n    req.timeoutInterval = 5\n    req.headers = {\"Content-Type\": \"application\/json\"}\n    req.allowInsecureRequest = true\n    log(req)\n    await req.load()\n}\n\nfunction title_color() {\n    if (Device.isUsingDarkAppearance()) {\n        return new Color(\"#111111\")\n    } else {\n        return new Color(\"#ededed\")\n    }\n}\n\nfunction notification(title, body) {\n    notify = new Notification()\n    notify.title = title\n    notify.body = body\n    notify.identifier = \"raspiot_notification\"\n    notify.schedule()\n    Notification.removeDelivered([notify.identifier])\n}\n",
  "share_sheet_inputs" : [

  ]
}