{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "sitemap"
  },
  "name" : "raspiot",
  "script" : "var para = args.queryParameters\nlog(para)\nraspiot_ip = para.ip || \"192.168.31.242\"    \/\/ replace with your raspiot-server's LAN IP\nconst raspiot_endpoint = \"http:\/\/\" + raspiot_ip\nlog(raspiot_endpoint)\nmain()\n\nfunction main() {\n    action = [\"smart home\"]\n    alert = new Alert()\n    alert.title = \"raspiot\"\n    for (a in action) {\n        alert.addAction(action[a])\n    }\n    \n    alert.addCancelAction(\"exit\")\n    alert.presentSheet().then(idx => {\n        if(idx == 0)\n            raspiot()\n    })\n}\n\nasync function raspiot() {\n    house = \"raspiot home\"\n    rooms = await get_room_list(house)\n    house_table = new UITable()\n    house_table.showSeparators = true\n    title = new UITableRow()\n    title.isHeader = true\n    title.backgroundColor = Color.blue()\n    back = title.addButton(\"🔚\")\n    back.leftAligned()\n    back.widthWeight =10\n    back.dismissOnTap = true\n    back.onTap = () => {\n        log(\"exit\")\n    }\n    room_name = title.addText(house)\n    room_name.centerAligned()\n    room_name.widthWeight = 80\n    menu = title.addButton(\"📋\")\n    menu.rightAligned()\n    menu.widthWeight = 10\n    menu.onTap = () => {\n        handle_room(house)\n    }\n    house_table.addRow(title)\n\n    for (r in rooms) {\n        let room = rooms[r]\n        room_row = new UITableRow()\n        room_row.dismissOnSelect = false\n        room_row.onSelect = () => {\n            room_table = new UITable()\n            room_table.showSeparators = true\n            in_room(room_table, room.name)\n            room_table.present(fullscreen=false)\n        }\n        room_ui = room_row.addText(room.name)\n        room_ui.centerAligned()\n        house_table.addRow(room_row)\n    }\n    house_table.present(fullscreen=true)\n}\n\nasync function in_room(table, room, select, on_show) {\n    select = select || \"\"\n    on_show = on_show || \"\"\n    devices = await get_device_list(room)\n    log(\"tap \" + select)\n    table.removeAllRows()\n    title = new UITableRow()\n    title.isHeader = true\n    title.backgroundColor = Color.blue()\n    back = title.addButton(\"🔙\")\n    back.leftAligned()\n    back.widthWeight =10\n    back.dismissOnTap = true\n    back.onTap = () => {\n        log(\"back to raspiot\")\n    }\n    room_name = title.addText(room)\n    room_name.centerAligned()\n    room_name.widthWeight = 80\n    menu = title.addButton(\"📋\")\n    menu.rightAligned()\n    menu.widthWeight = 10\n    menu.onTap = () => {\n        handle_device(room)\n    }\n    table.addRow(title)\n\n    for (d in devices) {\n        let device = devices[d]\n        device_row = new UITableRow()\n        device_row.dismissOnSelect = false\n        device_row.onSelect = () => {\n            on_select = select == on_show ? \"\" : select\n            log(\"select \" + device.name)\n            in_room(table, room, device.name, on_select)\n        }\n        device_row.addText(\"\").widthWeight = 15\n        device_ui = device_row.addText(device.name)\n        device_ui.centerAligned()\n        device_ui.widthWeight = 70\n        icon = device.status == \"online\" ? \"🟢\" : \"🟠\"\n        status = device_row.addText(icon)\n        status.rightAligned()\n        status.widthWeight = 15\n        table.addRow(device_row)\n        if (device.name == select && select != on_show) {\n            await show_device(table, room, device)\n        }\n    }\n    table.reload()\n}\n\nfunction handle_room(house) {\n    let alert = new Alert()\n    alert.title = \"handle room\"\n    alert.addAction(\"➕ add room\")\n    alert.addAction(\"🔄 rename room\")\n    alert.addDestructiveAction(\"➖  remove room\")\n    alert.addCancelAction(\"cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx == 0)\n            add_room(house)\n        else if(idx == 1)\n            rename_room(house)\n        else if(idx == 2)\n            delroom(house)\n    })\n}\n\nfunction add_room(house) {\n    let alert = new Alert()\n    alert.title = \"add room\"\n    alert.addTextField(\"room name\")\n    alert.addAction(\"ok\")\n    alert.addCancelAction(\"cancel\")\n    alert.present().then(idx => {\n        let room = alert.textFieldValue(0)\n        if(room.length > 0) {\n            let rooms = get_room_list(house)\n            if(rooms.indexOf(room) == -1)\n                log(\"new room\")\n            else\n                log(room + \" is exists.\")\n            \/\/ send request to raspiot-server\n        }\n        raspiot()\n    })\n}\n\nfunction rename_room(house) {\n    let rooms = get_room_list(house)\n    let alert = new Alert()\n    alert.title = \"rename room\"\n    for (r in rooms) {\n        alert.addAction(rooms[r])\n    }\n    alert.addCancelAction(\"cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx == -1)\n            raspiot()\n        else if(idx < rooms.length) {\n            let oldroom = rooms[idx]\n            let checkbox =  new Alert()\n            checkbox.title = \"rename \" + oldroom + \" to\"\n            checkbox.addTextField(\"input the room name\")\n            checkbox.addDestructiveAction(\"rename\")\n            checkbox.addCancelAction(\"cancel\")\n            checkbox.presentAlert().then(idx => {\n                let newroom = checkbox.textFieldValue(0)\n                if(idx == 0) {\n                    if(rooms.indexOf(newroom) == -1) {\n                        console.log(oldroom + \" is renamed to \"+ newroom)\n                    } else {\n                        console.log(oldroom + \" is exists\")\n                    }\n                }\n                raspiot()\n            })\n        }\n    })\n}\n\nfunction delroom(house) {\n    let rooms = get_room_list(house)\n    let alert = new Alert()\n    alert.title = \"remove room\"\n    for (r in rooms) {\n        alert.addAction(rooms[r])\n    }\n    alert.addCancelAction(\"cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx == -1)\n            raspiot()\n        else if(idx < rooms.length) {\n            let room = rooms[idx]\n            let checkbox =  new Alert()\n            checkbox.title = \"Are you sure to remove the \" + room + \"?\"\n            checkbox.addTextField(\"input the room name\")\n            checkbox.addDestructiveAction(\"remove\")\n            checkbox.addCancelAction(\"cancel\")\n            checkbox.presentAlert().then(idx => {\n                if(idx == 0) {\n                    if(checkbox.textFieldValue(0) == room)\n                        console.log(room + \" is removed.\")\n                    else\n                        console.log(\"input no match. remove cancel.\")\n                } else {\n                    raspiot()\n                }\n            })\n        }\n    })\n}\n\nasync function get_room_list(house) {\n    url = raspiot_endpoint + \"\/rooms\"\n    req = new Request(url)\n    req.timeoutInterval = 5\n    rooms = await req.loadJSON()\n    log(rooms)\n    return rooms\n}\n\nfunction handle_device(room) {\n    let alert = new Alert()\n    alert.title = \"handle device\"\n    alert.addAction(\"➕ add device\")\n    alert.addAction(\"🔄 rename device\")\n    alert.addDestructiveAction(\"➖  remove device\")\n    alert.addCancelAction(\"back\")\n    alert.presentSheet().then(idx => {\n        if(idx == -1)\n            in_room(room)\n        else if(idx == 0)\n            add_device(room)\n        else if(idx == 1)\n            rename_device(room)\n        else if(idx == 2)\n            del_device(room)\n    })\n}\n\nasync function show_device(table, room, device) {\n    log(\"show \" + device.name)\n    device = await get_device_attrs(device.uuid)\n    for (d in device.attrs) {\n        row = new UITableRow()\n        row.dismissOnSelect = false\n        row.backgroundColor = device.status == \"online\" ? Color.green() : Color.yellow()\n        let attr = device.attrs[d]\n        row.addText(attr.name).leftAligned()\n        if (attr.type == \"text\") {\n            if (attr.read_only) {\n                row.addText(attr.value).rightAligned()\n            } else {\n                text = row.addButton(attr.value)\n                text.rightAligned()\n                text.onTap = () => {\n                    deal_text(table, room, device, attr)\n                }\n            }\n        } else if (attr.type == \"select\") {\n            select = row.addButton(attr.value)\n            select.rightAligned()\n            select.onTap = () => {\n                deal_select(table, room, device, attr)\n            }\n        } else if (attr.type == \"stream\") {\n            stream = row.addButton(attr.value)\n            stream.rightAligned()\n            stream.onTap = () => {\n                deal_stream(table, room, device, attr)\n            }\n        }  else if (attr.type == \"image\") {\n            row.addImageAtURL(attr.value)\n        } else if (attr.type == \"button\") {\n            button = row.addButton(attr.name)\n            button.rightAligned()\n            button.onTap = () => {\n                set_attr(table, room, device, attr.name, attr.value)\n            }\n        } else if (attr.type == \"switch\") {\n            switch_uri = get_switch_uri(attr.value)\n            switch_icon = row.addImageAtURL(switch_uri)\n            switch_icon.rightAligned()\n            \/\/ UITableCell中只有button支持触摸事件，这里用row的选择事件代替\n            row.onSelect = () => {\n                set_attr(table, room, device, attr.name, String(!attr.value))\n            }\n        } else if (attr.type == \"range\") {\n            range = row.addButton(attr.value)\n            range.rightAligned()\n            range.onTap = () => {\n                set_range(table, room, device, attr)\n          }\n        }\n        table.addRow(row)\n    }\n}\n\nfunction deal_text(table, room, device, attr) {\n    input = new Alert()\n    input.title = \"Set \" + attr.name\n    input.addTextField(attr.value)\n    input.addDestructiveAction(\"OK\")\n    input.addCancelAction(\"Cancel\")\n    input.presentAlert().then(idx => {\n        if(idx == 0) {\n            input_value = input.textFieldValue(0)\n            log(\"deal text \" + input_value)\n            set_attr(table, room, device, attr.name, input_value)\n        }\n    })\n}\n\nfunction deal_stream(table, room, device, attr) {\n    let web_view = new WebView()\n    log(attr.value)\n    web_view.loadURL(attr.value)\n    web_view.waitForLoad()\n    web_view.present()\n}\n\nfunction deal_select(table, room, device, attr) {\n    log(\"select \" + attr.name)\n    let alert = new Alert()\n    alert.title = \"select \" + attr.name\n    options = attr.value_constraint.options\n    for (o in options) {\n        alert.addAction(options[o])\n    }\n    alert.addCancelAction(\"cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx != -1) {\n            set_attr(table, room, device, attr.name, options[idx])\n        }\n    })\n}\n\nfunction set_range(table, room, device, attr) {\n    let alert = new Alert()\n    alert.title = \"set \" + attr.name\n    min = attr.value_constraint.min\n    max = attr.value_constraint.max\n    step = attr.value_constraint.step\n    for (var i=min; i <= max; i+=step) {\n        alert.addAction(String(i))\n    }\n    alert.addCancelAction(\"cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx != -1) {\n            set_attr(table, room, device, attr.name, String(idx * step + min))\n        }\n    })\n}\n\nasync function set_attr(table, room, device, attr_name, attr_value) {\n    if (device.status == \"offline\") {\n        notify = new Notification()\n        notify.title = \"Fail to handle device\"\n        notify.body = \"device is offline\"\n        notify.schedule()\n        return\n    }\n\n    url = raspiot_endpoint + \"\/device\/\" + device.uuid + \"\/attr\"\n    let req = new Request(url)\n    req.method=\"PUT\"\n    req.timeoutInterval = 10\n    req.headers = {\"Content-Type\": \"application\/json\"}\n    req.allowInsecureRequest = true\n    req.addParameterToMultipart(\"attr\", attr_name)\n    req.addParameterToMultipart(\"value\", attr_value)\n    await req.loadJSON()\n    log(req)\n    in_room(table, room, device.name)\n}\n\nfunction get_switch_uri(value) {\n    switch_on_uri = raspiot_endpoint + \"\/statics\/switch_on.png\"\n    switch_off_uri = raspiot_endpoint + \"\/statics\/switch_off.png\"\n    if (value) {\n        return switch_on_uri\n    }\n    return switch_off_uri\n}\n\nfunction add_device(room) {\n    let alert = new Alert()\n    alert.title = \"add device\"\n    alert.addTextField(\"device name\")\n    alert.addTextField(\"device mac address\")\n    alert.addAction(\"ok\")\n    alert.addCancelAction(\"cancel\")\n    alert.present().then(idx => {\n        if(idx == -1)\n            in_room(room)\n    })\n}\n\nfunction del_device(room) {\n    let devices = get_device_list(room)\n    let alert = new Alert()\n    alert.title = \"remove device\"\n    for (d in devices) {\n        alert.addAction(devices[d])\n    }\n    alert.addCancelAction(\"cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx == -1)\n            raspiot()\n        else if(idx < devices.length) {\n            let device = devices[idx]\n            let checkbox =  new Alert()\n            checkbox.title = \"Are you sure to remove the \" + device + \"?\"\n            checkbox.addTextField(\"input the device name\")\n            checkbox.addDestructiveAction(\"remove\")\n            checkbox.addCancelAction(\"cancel\")\n            checkbox.presentAlert().then(idx => {\n                if(idx == 0) {\n                    if(checkbox.textFieldValue(0) == device)\n                        console.log(device + \" is removed.\")\n                    else\n                        console.log(\"input no match. remove cancel.\")\n                } else {\n                    in_room(room)\n                }\n            })\n        }\n    })\n}\n\nasync function get_device_list(room) {\n    url = raspiot_endpoint + \"\/devices?room=\" + room\n    let req = new Request(url)\n    req.timeoutInterval = 5\n    let devices = await req.loadJSON()\n    log(devices)\n    return devices\n}\n\nasync function get_device_attrs(device_uuid) {\n    url = raspiot_endpoint + \"\/device\/\" + device_uuid\n    let req = new Request(url)\n    req.timeoutInterval = 5\n    let attrs = await req.loadJSON()\n    return attrs\n}\n\nfunction pi_status() {\n    status = \"ip: \" + raspiot_ip + \"\\n\"\n    status += \"run time: 16mins\\n\"\n    alert = new Alert()\n    alert.title = \"pi's status\"\n    alert.message = status\n    alert.addCancelAction(\"back\")\n    alert.presentSheet().then(idx => {\n        if(idx == -1)\n            main()\n    })\n}\n\nfunction shutdown() {\n    let alert = new Alert()\n    alert.title = \"Are you sure to shut down?\"\n    alert.addDestructiveAction(\"shut down\")\n    alert.addCancelAction(\"cancel\")\n    alert.presentSheet().then(idx => {\n        if(idx == 0)\n            log(\"shutdown pi\")\n        else if(idx == -1)\n            main()\n    })\n}\n",
  "share_sheet_inputs" : [

  ]
}